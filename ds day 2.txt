DS day 1


1.Implement bubble sort algorithm to sort a numeric array in JavaScript

function bblsort(array) {
    for (i=0;i<arr.length;i++){
        for (j=0;j<(arr.length -i -1);j++){
            if (arr[j]>arr[j+1]){
                var temp = arr[j]
                arr[j] = arr[j+1]
                arr[j+1] = temp
            }
        }
    }
    console.log(arr);
}
var arr = [54,23,65,87,72,24,26,98];

bblsort(arr);




2.Implement insertion sort algorithm to sort a numeric array in JavaScript. 

const insertion_Sort = (nums) => {
    for (let i = 1; i < nums.length; i++) {
      let j = i - 1
      let temp = nums[i]
      while (j >= 0 && nums[j] > temp) {
        nums[j + 1] = nums[j]
        j--
      }
      nums[j+1] = temp
    }
    return nums
  }
  console.log(insertion_Sort([3,65,23,98,-28,65,43,-5]));


3.	Implement linear search algorithm in JavaScript. 
<html>
<head>
<title>linear</title>
<script type="text/javascript">
    function linear()
{
    var n=parseInt(prompt("Enter the size of an array"));
    var a=new Array(n);
    var t=0;
    for(var i=0; i<a.length; i++)
    {
        a[i]=parseInt(prompt("Enter array elements"));
    }
    var k=parseInt(prompt("Enter the key element to search: "));
    for(var i=0; i<a.length; i++)
    {
        if(k==a[i])
        {
            t=1;
            break;
        }
    }
    if(t==1)
    {
        document.writeln("Element "+a[i]+ " Found at Position:"+i);
    }
    else
    {
        document.writeln("Element Not Found");
    }
}
</script>
</head>
<body  onLoad="linear()"></body>
</html>

4.Implement binary search algorithm in JavaScript.

function binary_Search(items, value){
  var firstIndex  = 0,
      lastIndex   = items.length - 1,
      middleIndex = Math.floor((lastIndex + firstIndex)/2);

  while(items[middleIndex] != value && firstIndex < lastIndex)
  {
     if (value < items[middleIndex])
      {
          lastIndex = middleIndex - 1;
      } 
    else if (value > items[middleIndex])
      {
          firstIndex = middleIndex + 1;
      }
      middleIndex = Math.floor((lastIndex + firstIndex)/2);
    }

 return (items[middleIndex] != value) ? -1 : middleIndex;
}
var items = [1,2,3,4,5,6,7,8,9];
console.log(binary_Search(items, 6));   
console.log(binary_Search(items, 7));


5.Implement set operations in JavaScript. 

const result = difference(setA, setB);

console.log(result);function difference(setA, setB) {
    let differenceSet = new Set(setA)
    for (let i of setB) {
        differenceSet.delete(i)
    }
    return differenceSet
}

// two sets of fruits
const setA = new Set(['pen', 'book', 'pencil']);
const setB = new Set(['book', 'table', 'chalk']);